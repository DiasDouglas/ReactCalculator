{"version":3,"sources":["components/Button.jsx","components/Display.jsx","main/Calculator.jsx","serviceWorker.js","index.js"],"names":["props","onClick","e","click","label","className","operation","double","triple","value","initialState","displayValue","clearDisplay","values","currentValueIndex","Calculator","state","clearMemory","bind","setOperation","addDigit","additiveInverse","this","setState","console","log","undefined","equals","divisionByZero","currentOperation","toFixed","n","includes","i","newValue","parseFloat","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.7134b43f.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Button.css'\r\n\r\nexport default props => \r\n    <button \r\n        onClick={e => props.click && props.click(props.label)}\r\n        className={`\r\n            button\r\n            ${props.operation ? 'operation' : ''}\r\n            ${props.double ? 'double' : ''}\r\n            ${props.triple ? 'triple' : ''}\r\n        `}>\r\n        { props.label }\r\n    </button> ","import React from 'react'\r\nimport './Display.css'\r\n\r\nexport default props => \r\n<div className=\"display\">{ props.value }</div>","import React, { Component } from 'react'\r\nimport './Calculator.css'\r\nimport Button from '../components/Button'\r\nimport Display from '../components/Display'\r\n\r\nconst initialState = {\r\n    displayValue: '0',\r\n    clearDisplay: false,\r\n    operation: null,\r\n    values: [0, 0],\r\n    currentValueIndex: 0\r\n}\r\n\r\nexport default class Calculator extends Component {\r\n\r\n    state = { ...initialState }\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.clearMemory = this.clearMemory.bind(this)\r\n        this.setOperation = this.setOperation.bind(this)\r\n        this.addDigit = this.addDigit.bind(this)\r\n        this.additiveInverse = this.additiveInverse.bind(this)\r\n    }\r\n\r\n    clearMemory(){\r\n        this.setState({ ...initialState })\r\n    }\r\n\r\n    additiveInverse(){\r\n        console.log(this.state)\r\n        const values = [...this.state.values]\r\n        const currentValueIndex = this.state.currentValueIndex\r\n\r\n        values[currentValueIndex] *= -1 \r\n\r\n        this.setState({ values: values, displayValue: values[currentValueIndex] })\r\n    }\r\n\r\n    setOperation(operation){\r\n        if(this.state.currentValueIndex === 0){\r\n            this.setState({operation, currentValueIndex: 1, clearDisplay: true})\r\n        }\r\n        else if(this.state.values[1] !== undefined){\r\n            const equals = operation === '='\r\n            var divisionByZero = false\r\n            const currentOperation = this.state.operation\r\n\r\n            const values = [...this.state.values]\r\n            \r\n            switch(currentOperation){\r\n                case '+':\r\n                    values[0] = values[0] + values[1]\r\n                    values[1] = 0\r\n                    break\r\n                case '-':\r\n                    values[0] = values[0] - values[1]\r\n                    values[1] = 0\r\n                    break\r\n                case 'x':\r\n                    values[0] = values[0] * values[1]\r\n                    values[1] = 0\r\n                    break\r\n                case '/':\r\n                    if(values[1] === 0){\r\n                        divisionByZero = true\r\n                    }\r\n                    else {\r\n                        values[0] = values[0] / values[1]\r\n                        values[1] = 0\r\n                    }\r\n                    break\r\n                case '%':\r\n                    values[0] = (values[0] / 100) * values[1]\r\n                    values[1] = 0\r\n                    break\r\n                default:\r\n            }\r\n            \r\n            values[0] = values[0] % 1 !== 0 ? values[0].toFixed(3) : values[0];\r\n\r\n            if(!divisionByZero){\r\n                this.setState({\r\n                    displayValue: values[0], \r\n                    operation: equals ? null : operation,\r\n                    currentValueIndex: equals ? 0 : 1,\r\n                    clearDisplay: !equals,\r\n                    values\r\n                })\r\n            }\r\n            else {\r\n                this.setState({...initialState, displayValue: \"ERROR\"})\r\n            }\r\n        }\r\n    }\r\n\r\n    addDigit(n){\r\n        if(n === '.' && this.state.displayValue.includes('.')){\r\n            return\r\n        }\r\n        \r\n        const clearDisplay = (this.state.displayValue === '0' && n !== '.') ||\r\n            this.state.displayValue === \"ERROR\" || this.state.clearDisplay\r\n        \r\n        const currentValue = clearDisplay ? '' : this.state.displayValue\r\n        const displayValue = currentValue + n\r\n        this.setState({displayValue, clearDisplay: false})\r\n\r\n        if(n !== '.'){\r\n            const i = this.state.currentValueIndex\r\n            const newValue = parseFloat(displayValue)\r\n            const values = [...this.state.values]\r\n            values[i] = newValue\r\n            this.setState({ values })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"calculator\">\r\n                <Display value={this.state.displayValue} />\r\n                <Button label=\"AC\" click={this.clearMemory}/>\r\n                <Button label=\"+/-\" click={this.additiveInverse}/>\r\n                <Button label= \"%\" click={this.setOperation}/>\r\n                <Button label=\"/\" operation click={this.setOperation}/>\r\n                <Button label=\"7\" click={this.addDigit}/>\r\n                <Button label=\"8\" click={this.addDigit}/>\r\n                <Button label=\"9\" click={this.addDigit}/>\r\n                <Button label=\"x\" operation click={this.setOperation} />\r\n                <Button label=\"4\" click={this.addDigit}/>\r\n                <Button label=\"5\" click={this.addDigit}/>\r\n                <Button label=\"6\" click={this.addDigit}/>\r\n                <Button label=\"-\" operation click={this.setOperation}/>\r\n                <Button label=\"1\" click={this.addDigit}/>\r\n                <Button label=\"2\" click={this.addDigit}/>\r\n                <Button label=\"3\" click={this.addDigit}/>\r\n                <Button label=\"+\" operation click={this.setOperation}/>\r\n                <Button label=\"0\" click={this.addDigit} double/>\r\n                <Button label=\".\" click={this.addDigit}/>\r\n                <Button label=\"=\" operation click={this.setOperation}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Calculator from './main/Calculator';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n<div>\n  <h1>Calculator</h1>\n  <Calculator />\n</div>\n, document.getElementById('root'));\n\nserviceWorker.register();\n"],"sourceRoot":""}